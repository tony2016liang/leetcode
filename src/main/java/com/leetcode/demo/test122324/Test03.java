package com.leetcode.demo.test122324;

import java.util.*;

/**
 * 一个 M*N 的矩阵，每个格子中可以有 0、-1、正整数  三种类型的数，其中 0 指障碍物，-1 指加油站，正整数指耗油量
 *
 * 一辆有着一定初始油量的车从左上角方格出发，每经过一个方格，消耗方格中数值的油量，目的地是右下角。
 * 遇到加油站（-1）可以把油加满（油箱最大容量100）。
 * 遇到 0 则需要绕路。
 * 汽车只能从 上、左、下、右 四个方向行进。
 *
 * 问：汽车能否达到终点（即右下角）？到达终点所需要的最少得初始油量？
 *
 * 输入：(第一行是两个数，代表矩阵的行数和列数；接下来每行代表矩阵的一行，元素间用逗号隔开)
 * 案例1：
 * 2,2
 * 10,20
 * 30,40
 * 输出：70（路径：右-下）
 *
 * 案例2：
 *
 */
public class Test03 {

    // 定义两个指示行进方向的坐标（上左下右）
    static int[] dr = {-1, 0, 1, 0};  // 行 上的变化
    static int[] dc = {0, -1, 0, 1};  // 行 上的变化

    public static void main(String[] args) {
        /**
         * 最少初始油量和最终能否走到终点可以分开看
         *
         * 1、最少初始油量和离终点的远近以及第一次碰到加油站有关
         *   1.1 如果走到终点没碰到加油站，但所耗费的油量都不大于100，则按耗费油量计算初始油量
         *   1.2 如果走到终点前就碰到第一个加油站了，则以遇到加油站前所耗费的油量来定初始油量
         *   1.3 如果遇到不同方向上的第一个加油站，且耗费了不同的油量，则以最低的为准
         * 2、能否走到终点有加油站和无加油站情况
         *   2.1 如果没有加油站（或者有加油站，但是100油量限制内达不到），然后到终点的最少耗油量都大于100，则达不到终点
         *   2.2 如果有加油站，但是经过最后一个加油站后，到终点的最少耗油量也大于100，则也达不到终点
         */
        Scanner in = new Scanner(System.in);
        int R = in.nextInt();  // 行数
        int C = in.nextInt();  // 列数
        int[][] grid = new int[R][C];  // 图
        // 拿到棋盘中的所有数
        for (int r = 0; r < R; r++) {
            for (int c = 0; c < C; c++) {
                grid[r][c]  = in.nextInt();
            }
        }
        int init = 100;  // 初始的油量
        int curr = 0;  // 当前的油量
        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid[0].length; c++) {
                // 遍历四个方向
                for (int i = 0; i < 4; i++) {
                    int nr = r + dr[i];
                    int nc = c + dc[i];
                    if (nr >= 0 && nr < R && nc >= 0 && nc < C) {

                    }
                }
            }
        }
    }
}
